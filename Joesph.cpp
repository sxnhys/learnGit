/*
约瑟夫问题： n个人，编号从0 ~ n - 1, 从0开始报数，报到m的人出局，
			问最后剩下的人的编号
易知第一个出局的人的编号是（m - 1）% n，所以下一轮报数从 k = m % n
开始，接下来将剩下的人编号调整一下：
				k —> 0
				k+1 —> 1
				k+2 —> 2
				   ...
				   ...
				k-2 —> n-2
这样就完全转换为n-1个人的约瑟夫问题
假设我们已经知道最后剩下的人是x，即n个人的约瑟夫问题的解，那么n-1
个人的约瑟夫问题的解为 x' = (x + k) % n
f[i]表示i个人的约瑟夫问题的解，最后我们要知道的是f[n]，递推关系如下：
f[1] = 0;
f[i+1] = (f[i] + m) % i   (i > 1)
*/

// 1 ~ n的约瑟夫问题的解
void joseph(int n, int m) {
	f[1] = 0;
	for(int i = 2; i <= n; i++)
		f[i] = (f[i-1] + m) % i;
}

// f(n, k, i)表示第i个出局的人
// 编号1~n
int f(int n, int k, int i) {
	if(i == 1)
		return (m + k - 1) % m;
	return (f(m-1, k, i-1) + k) % m;
}